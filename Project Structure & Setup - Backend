Backend: Node.js with Express and TypeScript
We'll create a simple backend with Node.js, Express, and TypeScript. Optionally, we'll use the Nest.js framework.

Step-by-Step Instructions:

1. Initialize the Project:

  ```bash
  mkdir feedback-management-system
  cd feedback-management-system
  npm init -y

2. Install Dependencies:

  ```bash
  npm install express typescript ts-node @types/node @types/express nodemon

3. Setup TypeScript:

  ```bash
  npx tsc --init

4. Configure tsconfig.json:

Update tsconfig.json to include:
  ```json
  {
    "compilerOptions": {
      "target": "ES6",
      "module": "commonjs",
      "outDir": "./dist",
      "rootDir": "./src",
      "strict": true,
      "esModuleInterop": true
    },
    "include": ["src"],
    "exclude": ["node_modules"]
  }

5. Create Project Structure:

  ```bash
  mkdir src
  cd src
  mkdir controllers models routes services

6. Setup Express Server:

Create src/index.ts:
  ```typescript
  import express from 'express';
  import feedbackRoutes from './routes/feedbackRoutes';

  const app = express();
  const PORT = 3000;

  app.use(express.json());
  app.use('/feedback', feedbackRoutes);

  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
  });

7. Create Routes and Controllers:

Create src/routes/feedbackRoutes.ts:
  ```typescript
  import { Router } from 'express';
  import { getAllFeedback, submitFeedback } from '../controllers/feedbackController';

  const router = Router();

  router.get('/', getAllFeedback);
  router.post('/', submitFeedback);

  export default router;

Create src/controllers/feedbackController.ts:
  ```typescript
  import { Request, Response } from 'express';

  interface Feedback {
    name: string;
    feedback: string;
  }

  const feedbacks: Feedback[] = [];

  export const getAllFeedback = (req: Request, res: Response) => {
    res.json(feedbacks);
  };

  export const submitFeedback = (req: Request, res: Response) => {
    const { name, feedback } = req.body;
    feedbacks.push({ name, feedback });
    res.status(201).json({ message: 'Feedback submitted successfully' });
  };

8. Setup Nodemon for Development:

Update package.json:
  ```json
  "scripts": {
    "start": "tsc && node dist/index.js",
    "dev": "nodemon src/index.ts"
  }

9. Start the Server:

  ```bash
  npm run dev
